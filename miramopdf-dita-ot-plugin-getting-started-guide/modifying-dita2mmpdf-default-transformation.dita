<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en-us" id="modifying-dita2mmpdf-default-transformation">
	<title>Customizing the <ph keyref="com.abc.mmpdf"/> using XSLT </title>
	<conbody>
		<p>Edit the <codeph>cfg/xsl/custom.xsl</codeph> stylesheet to add
				<codeph>&lt;xsl:template&gt;</codeph> matches to achieve the required mapping from
			DITA elements and attributes to MiramoXML elements and attributes. (See the <xref
				conkeyref="xrefs/see_mmcomposerRefGuide"/> for a detailed description of the
			MiramoXML file format).</p>
		<p><codeph>&lt;xsl:template&gt;</codeph>s added here may either override or add to the
				<codeph>&lt;xsl:template&gt;</codeph>s defined in the default DITA to MiramoXML
			stylesheets located in the  <ph keyref="com.miramo.mmpdf"/>/xsl folder,  for
				example<codeph> map2miramo.xsl</codeph>,  <codeph>topic2miramo.xsl</codeph> and
				<codeph>utilities.xsl</codeph>. </p>
		<p>Here is a simple example where a &lt;note> element with @type set to 'other' is mapped to
			a 'callout' ParaDef:</p>
		<codeblock>&lt;xsl:template match="*[contains(@class, ' topic/note ') and @type='other']">
	&lt;P paraDef="callout">&lt;xsl:apply-templates/>&lt;/P>
&lt;/xsl:template></codeblock>
		<p>The slightly more complex example is shown below, which adds support for an &lt;entry> element
			@outputclass value of 'subheading' to allow insertion of subheading rows within a table.
			The customization below is used to produce this document, an example of the resulting
			subheadings is shown  in <xref conkeyref="xrefs/see_outputclass"
			/>:<codeblock id="codeblock_uyz_fjy_jqb">  &lt;!-- Support for &lt;entry> @outputclass='subhead': provide overrides for standard
  makeOneRow (handles keep with next) and mm:cellAttributesFromOutputClass (applies
  custom table cell formatting 
  MiramoXML attribute names and values are specified in the mmComposer Reference Guide
  -->
 
  &lt;!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  &lt;!-- Override makeOneRow utility to check for &lt;entry> @outputclass=subheading to set keepWithNext property
    to prevent orphaned subheadings -->
  &lt;xsl:template name="makeOneRow">
    &lt;xsl:param name="type"/>
    &lt;!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    &lt;Row type="{$type}">
      &lt;xsl:call-template name="addRowAttributes"/>
      &lt;xsl:if test="*[@outputclass='subheading']">
        &lt;xsl:attribute name="withNext">Y&lt;/xsl:attribute>
      &lt;/xsl:if>
      &lt;xsl:apply-templates/>
    &lt;/Row>		
  &lt;/xsl:template>
  
  &lt;!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  &lt;!-- Override mm:cellAttributesFromOutputClass utility to set paragraph format to tableHeader, switch off row shading and add ruling.
       -->
  &lt;xsl:function name="mm:cellAttributesFromOutputClass" as="node()*">
    &lt;xsl:param name="outputclass" as="xs:string?"/>
    &lt;xsl:param name="node" as="node()"/>
    &lt;!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    &lt;xsl:if test="contains($node/@outputclass, 'subheading')">
      &lt;xsl:attribute name="paraDef">tableHeader&lt;/xsl:attribute>
      &lt;xsl:attribute name="fillColor">none&lt;/xsl:attribute>
      &lt;xsl:attribute name="topRule">Very Thin&lt;/xsl:attribute>
      &lt;xsl:attribute name="bottomRule">Very Thin&lt;/xsl:attribute>
      &lt;xsl:attribute name="topMargin">8pt&lt;/xsl:attribute>
    &lt;/xsl:if>
  &lt;/xsl:function>
  </codeblock></p>
	</conbody>
</concept>
